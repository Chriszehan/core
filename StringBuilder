# StringBuilder

Java编译器对String做了特殊处理，使得我们可以使用+拼接字符串。

String s = "";
for (int i = 0; i < 1000; i++) {
    s = s + "," + i;
}

虽然可直接拼接字符串，但是，在循环中，每次循环都会创建新的字符串对象，然后抛弃旧的字符串。
这样，绝大部分字符串都是临时对象，不但浪费内存还会影响CG效率。

为了能高效拼接字符串，java标准库提供了StringBuilder，它是一个可变对象，可以预分配缓冲区，这样往StringBuilder中新增字符时，不会创建新的临时对象：

StringBuilder sb = new StringBuilder(1024);
for(int i;i < 1000;i++){
  sb.append(',');
  sb.append(i);
}
String s = sb.toString();

public class Main{
    public static void main(String[] args){
      var sb = new StringBuilder(1024);
      sb.append("Mr")
        .append("Bob")
        .append("!")
        .insert(0,"Hello, ");
      System.out.println(sb.toString());  
    }

}

查看StringBuilder源码可以发现，进行链式操作的关键是，定义的append()方法会返回this,这样，就可以不断调用自身的其他方法。

对于普通的字符串+操作 并不需要我们将其改写为StringBuffer，因为编译器会在编译时自动把多个连续的+操作编码为StringConcarFactory的操作。

在运行期，StringConcat会自动把字符串链接操作优化为数组复制或者StringBulider操作。





























































